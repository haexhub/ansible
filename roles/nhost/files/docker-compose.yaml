version: '3.6'

services:
  postgres:
    image: postgres
    restart: unless-stopped
    volumes:
      - ./data/db:/var/lib/postgresql/data
      - ./initdb.d:/docker-entrypoint-initdb.d:ro
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secretpgpassword}
    expose:
      - 5432
    networks:
      - nhost

  graphql-engine:
    image: hasura/graphql-engine:v2.10.0
    depends_on:
      - 'postgres'
    restart: unless-stopped
    ports:
      - 8080:8080
    networks:
      - web
      - nhost
    environment:
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD:-secretpgpassword}@postgres:5432/postgres
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD:-secretpgpassword}@postgres:5432/postgres
      HASURA_GRAPHQL_JWT_SECRET: ${HASURA_GRAPHQL_JWT_SECRET}
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET}
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: public
      HASURA_GRAPHQL_LOG_LEVEL: debug
      HASURA_GRAPHQL_ENABLE_CONSOLE: 'true'
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
    labels:
      - traefik.enable=true
      - traefik.http.routers.graphql.entrypoints=${TRAEFIK_HTTP_ENDPOINT}
      - traefik.http.routers.graphql.rule=Host(`graphql.${HOSTNAME}`)
      - traefik.docker.network=web
      #- traefik.http.routers.graphql_secure.rule=Host(`graphql.${HOSTNAME}`)
      #- traefik.http.routers.graphql_secure.entrypoints=${TRAEFIK_HTTPS_ENDPOINT}
      #- traefik.http.routers.graphql_secure.tls.certresolver=le_staging
      #- "traefik.http.routers.graphql.rule=Host(`${HOSTNAME}`) && PathPrefix(`/`)"

  auth:
    image: nhost/hasura-auth:latest
    depends_on:
      - postgres
      - graphql-engine
    restart: unless-stopped
    environment:
      AUTH_HOST: '0.0.0.0'
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD:-secretpgpassword}@postgres:5432/postgres
      HASURA_GRAPHQL_GRAPHQL_URL: http://graphql-engine:8080/v1/graphql
      HASURA_GRAPHQL_JWT_SECRET: ${HASURA_GRAPHQL_JWT_SECRET}
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET}
      AUTH_CLIENT_URL: ${AUTH_CLIENT_URL:-http://localhost:3000}
      AUTH_SMTP_HOST: mailhog
      AUTH_SMTP_PORT: 1025
      AUTH_SMTP_USER: user
      AUTH_SMTP_PASS: password
      AUTH_SMTP_SENDER: mail@example.com
    ports: 
      - 4000:4000
    networks:
      - web
      - nhost
    healthcheck:
      disable: true
    labels:
      - traefik.enable=true
      - traefik.http.routers.auth.entrypoints=${TRAEFIK_HTTP_ENDPOINT}
      #- traefik.http.routers.auth.rule=Host(`auth.${HOSTNAME}`)
      #- traefik.http.routers.auth_secure.rule=Host(`auth.${HOSTNAME}`)
      #- traefik.http.routers.auth_secure.entrypoints=${TRAEFIK_HTTPS_ENDPOINT}
      #- traefik.http.routers.auth_secure.tls.certresolver=le_staging
      - "traefik.http.middlewares.strip-auth.stripprefix.prefixes=/v1/auth"
     # - "traefik.http.middlewares.strip-auth_secure.stripprefix.prefixes=/v1/auth"
      - "traefik.http.routers.auth.rule=Host(`${HOSTNAME}`) && PathPrefix(`/v1/auth`)"
      - "traefik.http.routers.auth.middlewares=strip-auth@docker"
      - traefik.docker.network=web

  storage:
    image: nhost/hasura-storage:0.2.1
    depends_on:
      - postgres
      - graphql-engine
      - minio
    restart: unless-stopped
    ports:
      - 8000:8000
    networks:
      - web
      - nhost
    healthcheck:
      disable: true
    environment:
      PUBLIC_URL: storage.${HOSTNAME}:${PROXY_PORT:-80}
      HASURA_METADATA: 1
      HASURA_ENDPOINT: http://graphql-engine:8080/v1
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET}
      S3_ACCESS_KEY: ${STORAGE_ACCESS_KEY}
      S3_SECRET_KEY: ${STORAGE_SECRET_KEY}
      S3_ENDPOINT: http://minio:8484
      S3_BUCKET: nhost
      POSTGRES_MIGRATIONS: 1
      POSTGRES_MIGRATIONS_SOURCE: postgres://postgres:${POSTGRES_PASSWORD:-secretpgpassword}@postgres:5432/postgres?sslmode=disable
    labels:
      - traefik.enable=true
      - traefik.http.routers.storage.entrypoints=${TRAEFIK_HTTP_ENDPOINT}
      #- traefik.http.routers.storage.rule=Host(`storage.${HOSTNAME}`)
      #- traefik.http.routers.storage_secure.rule=Host(`storage.${HOSTNAME}`)
      #- traefik.http.routers.storage_secure.entrypoints=${TRAEFIK_HTTPS_ENDPOINT}
      #- traefik.http.routers.storage_secure.tls.certresolver=le_staging
      - "traefik.http.routers.storage.rule=Host(`${HOSTNAME}`) && PathPrefix(`/v1/storage`)"
      # Rewrite the path so it matches with the new storage API path introduced in hasura-storage 0.2
      - "traefik.http.middlewares.strip-suffix.replacepathregex.regex=^/v1/storage/(.*)"
      - "traefik.http.middlewares.strip-suffix.replacepathregex.replacement=/v1/$$1"
      - "traefik.http.routers.storage.middlewares=strip-suffix@docker"
      - traefik.docker.network=web
    command: serve

  functions:
    image: nhost/functions:latest
    restart: unless-stopped
    expose: 
      - 3000
    networks:
      - web
      - nhost
    healthcheck:
      disable: true
    volumes:
      - .:/opt/project
      - functions_node_modules:/opt/project/node_modules
      - /opt/project/data/
      - /opt/project/initdb.d/
    labels:
      - "traefik.enable=true"
      - "traefik.http.middlewares.strip-functions.stripprefix.prefixes=/v1/functions"
      - "traefik.http.routers.functions.rule=Host(`${HOSTNAME}`) && PathPrefix(`/v1/functions`)"
      - "traefik.http.routers.functions.middlewares=strip-functions@docker"
      - traefik.http.routers.functions.entrypoints=${TRAEFIK_HTTP_ENDPOINT}
      - traefik.docker.network=web

  minio:
    image: quay.io/minio/minio
    entrypoint: sh
    command: -c 'mkdir -p /data/nhost && /opt/bin/minio server --address :8484 /data'
    environment:
      MINIO_ROOT_USER: ${STORAGE_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${STORAGE_SECRET_KEY}
    ports:
      - ${MINIO_PORT:-8484}:8484
    networks:
      - nhost
    volumes:
      - minioData:/data

  mailhog:
    image: mailhog/mailhog
    environment:
      SMTP_HOST: ${AUTH_SMTP_HOST:-mailhog}
      SMTP_PORT: ${AUTH_SMTP_PORT:-1025}
      SMTP_PASS: ${AUTH_SMTP_PASS:-password}
      SMTP_USER: ${AUTH_SMTP_USER:-user}
      SMTP_SECURE: "${AUTH_SMTP_SECURE:-false}"
      SMTP_SENDER: ${AUTH_SMTP_SENDER:-hexxx@ok.de}
    ports:
      - ${AUTH_SMTP_PORT:-1025}:1025 
      - 8025:8025
    networks:
      - nhost
    volumes:
      - ./data/mailhog:/maildir

volumes:
  functions_node_modules:
  minioData:

networks:
  nhost:
  web:
    driver: bridge
    name: web
    external: true
